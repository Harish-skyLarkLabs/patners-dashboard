{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { login, register, logout } from \"./authThunk.ts\";\nimport TokenService from \"../../axios/tokenService.ts\";\nconst authInitialState = {\n  isLoading: false,\n  registerLoading: false,\n  registerSuccess: false,\n  registerError: null,\n  user: {},\n  isAuthenticate: false,\n  token: \"\",\n  error: null\n};\nconst authSlice = createSlice({\n  name: \"authSlice\",\n  initialState: authInitialState,\n  reducers: {\n    resetRegisterState: state => {\n      state.registerLoading = false;\n      state.registerSuccess = false;\n      state.registerError = null;\n    },\n    resetAuthError: state => {\n      state.error = null;\n    },\n    clearAuth: state => {\n      state.isAuthenticate = false;\n      state.token = \"\";\n      state.user = {};\n      TokenService.clearToken();\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Login reducers\n    .addCase(login.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.token = action.payload.data.access;\n      state.user = action.payload.data.user;\n      state.isAuthenticate = true;\n      state.error = null;\n      TokenService.setToken(action.payload.data.access);\n    }).addCase(login.rejected, (state, action) => {\n      var _action$payload;\n      state.isLoading = false;\n      state.error = ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.error) || \"Login failed\";\n    })\n\n    // Register reducers\n    .addCase(register.pending, state => {\n      state.registerLoading = true;\n      state.registerError = null;\n    }).addCase(register.fulfilled, state => {\n      state.registerLoading = false;\n      state.registerSuccess = true;\n    }).addCase(register.rejected, (state, action) => {\n      var _action$payload2, _action$payload2$erro;\n      state.registerLoading = false;\n      state.registerError = ((_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : (_action$payload2$erro = _action$payload2.error) === null || _action$payload2$erro === void 0 ? void 0 : _action$payload2$erro.data) || \"Registration failed\";\n    });\n    builder.addCase(logout.pending, (state, action) => {\n      TokenService.removeToken();\n      TokenService.removeCurrentUser();\n      state.isLoading = true;\n      state.isAuthenticated = false;\n    }).addCase(logout.fulfilled, (state, action) => {\n      state.isLoading = false;\n    }).addCase(logout.rejected, (state, action) => {\n      state.isLoading = false;\n    });\n  }\n});\nexport const {\n  resetRegisterState,\n  resetAuthError,\n  clearAuth\n} = authSlice.actions;\nexport const authActions = authSlice.actions;\nexport default authSlice;","map":{"version":3,"names":["createSlice","login","register","logout","TokenService","authInitialState","isLoading","registerLoading","registerSuccess","registerError","user","isAuthenticate","token","error","authSlice","name","initialState","reducers","resetRegisterState","state","resetAuthError","clearAuth","clearToken","extraReducers","builder","addCase","pending","fulfilled","action","payload","data","access","setToken","rejected","_action$payload","_action$payload2","_action$payload2$erro","removeToken","removeCurrentUser","isAuthenticated","actions","authActions"],"sources":["/home/skylark/Desktop/PARTNERS-PROD/patners-dashboard/src/store/auth/authSlice.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { login, register, logout } from \"./authThunk.ts\";\nimport TokenService from \"../../axios/tokenService.ts\";\n\nconst authInitialState = {\n    isLoading: false,\n    registerLoading: false,\n    registerSuccess: false,\n    registerError: null,\n    user: {},\n    isAuthenticate: false,\n    token: \"\",\n    error: null\n}\n\nconst authSlice = createSlice({\n    name: \"authSlice\",\n    initialState: authInitialState,\n    reducers: {\n        resetRegisterState: (state) => {\n            state.registerLoading = false;\n            state.registerSuccess = false;\n            state.registerError = null;\n        },\n        resetAuthError: (state) => {\n            state.error = null;\n        },\n        clearAuth: (state) => {\n            state.isAuthenticate = false;\n            state.token = \"\";\n            state.user = {};\n            TokenService.clearToken();\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n            // Login reducers\n            .addCase(login.pending, (state) => {\n                state.isLoading = true;\n                state.error = null;\n            })\n            .addCase(login.fulfilled, (state, action) => {\n                state.isLoading = false;\n                state.token = action.payload.data.access;\n                state.user = action.payload.data.user;\n                state.isAuthenticate = true;\n                state.error = null;\n                TokenService.setToken(action.payload.data.access);\n            })\n            .addCase(login.rejected, (state, action) => {\n                state.isLoading = false;\n                state.error = action.payload?.error || \"Login failed\";\n            })\n\n            // Register reducers\n            .addCase(register.pending, (state) => {\n                state.registerLoading = true;\n                state.registerError = null;\n            })\n            .addCase(register.fulfilled, (state) => {\n                state.registerLoading = false;\n                state.registerSuccess = true;\n            })\n            .addCase(register.rejected, (state, action) => {\n                state.registerLoading = false;\n                state.registerError = action.payload?.error?.data || \"Registration failed\";\n            })\n\n        builder\n            .addCase(logout.pending, (state, action) => {\n                TokenService.removeToken()\n                TokenService.removeCurrentUser();\n                state.isLoading = true;\n                state.isAuthenticated = false;\n\n            })\n            .addCase(logout.fulfilled, (state, action) => {\n                state.isLoading = false;\n            })\n            .addCase(logout.rejected, (state, action) => {\n                state.isLoading = false;\n            });\n    }\n})\n\nexport const { resetRegisterState, resetAuthError, clearAuth } = authSlice.actions;\nexport const authActions = authSlice.actions;\nexport default authSlice;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,gBAAgB;AACxD,OAAOC,YAAY,MAAM,6BAA6B;AAEtD,MAAMC,gBAAgB,GAAG;EACrBC,SAAS,EAAE,KAAK;EAChBC,eAAe,EAAE,KAAK;EACtBC,eAAe,EAAE,KAAK;EACtBC,aAAa,EAAE,IAAI;EACnBC,IAAI,EAAE,CAAC,CAAC;EACRC,cAAc,EAAE,KAAK;EACrBC,KAAK,EAAE,EAAE;EACTC,KAAK,EAAE;AACX,CAAC;AAED,MAAMC,SAAS,GAAGd,WAAW,CAAC;EAC1Be,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAEX,gBAAgB;EAC9BY,QAAQ,EAAE;IACNC,kBAAkB,EAAGC,KAAK,IAAK;MAC3BA,KAAK,CAACZ,eAAe,GAAG,KAAK;MAC7BY,KAAK,CAACX,eAAe,GAAG,KAAK;MAC7BW,KAAK,CAACV,aAAa,GAAG,IAAI;IAC9B,CAAC;IACDW,cAAc,EAAGD,KAAK,IAAK;MACvBA,KAAK,CAACN,KAAK,GAAG,IAAI;IACtB,CAAC;IACDQ,SAAS,EAAGF,KAAK,IAAK;MAClBA,KAAK,CAACR,cAAc,GAAG,KAAK;MAC5BQ,KAAK,CAACP,KAAK,GAAG,EAAE;MAChBO,KAAK,CAACT,IAAI,GAAG,CAAC,CAAC;MACfN,YAAY,CAACkB,UAAU,CAAC,CAAC;IAC7B;EACJ,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IACxBA;IACI;IAAA,CACCC,OAAO,CAACxB,KAAK,CAACyB,OAAO,EAAGP,KAAK,IAAK;MAC/BA,KAAK,CAACb,SAAS,GAAG,IAAI;MACtBa,KAAK,CAACN,KAAK,GAAG,IAAI;IACtB,CAAC,CAAC,CACDY,OAAO,CAACxB,KAAK,CAAC0B,SAAS,EAAE,CAACR,KAAK,EAAES,MAAM,KAAK;MACzCT,KAAK,CAACb,SAAS,GAAG,KAAK;MACvBa,KAAK,CAACP,KAAK,GAAGgB,MAAM,CAACC,OAAO,CAACC,IAAI,CAACC,MAAM;MACxCZ,KAAK,CAACT,IAAI,GAAGkB,MAAM,CAACC,OAAO,CAACC,IAAI,CAACpB,IAAI;MACrCS,KAAK,CAACR,cAAc,GAAG,IAAI;MAC3BQ,KAAK,CAACN,KAAK,GAAG,IAAI;MAClBT,YAAY,CAAC4B,QAAQ,CAACJ,MAAM,CAACC,OAAO,CAACC,IAAI,CAACC,MAAM,CAAC;IACrD,CAAC,CAAC,CACDN,OAAO,CAACxB,KAAK,CAACgC,QAAQ,EAAE,CAACd,KAAK,EAAES,MAAM,KAAK;MAAA,IAAAM,eAAA;MACxCf,KAAK,CAACb,SAAS,GAAG,KAAK;MACvBa,KAAK,CAACN,KAAK,GAAG,EAAAqB,eAAA,GAAAN,MAAM,CAACC,OAAO,cAAAK,eAAA,uBAAdA,eAAA,CAAgBrB,KAAK,KAAI,cAAc;IACzD,CAAC;;IAED;IAAA,CACCY,OAAO,CAACvB,QAAQ,CAACwB,OAAO,EAAGP,KAAK,IAAK;MAClCA,KAAK,CAACZ,eAAe,GAAG,IAAI;MAC5BY,KAAK,CAACV,aAAa,GAAG,IAAI;IAC9B,CAAC,CAAC,CACDgB,OAAO,CAACvB,QAAQ,CAACyB,SAAS,EAAGR,KAAK,IAAK;MACpCA,KAAK,CAACZ,eAAe,GAAG,KAAK;MAC7BY,KAAK,CAACX,eAAe,GAAG,IAAI;IAChC,CAAC,CAAC,CACDiB,OAAO,CAACvB,QAAQ,CAAC+B,QAAQ,EAAE,CAACd,KAAK,EAAES,MAAM,KAAK;MAAA,IAAAO,gBAAA,EAAAC,qBAAA;MAC3CjB,KAAK,CAACZ,eAAe,GAAG,KAAK;MAC7BY,KAAK,CAACV,aAAa,GAAG,EAAA0B,gBAAA,GAAAP,MAAM,CAACC,OAAO,cAAAM,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBtB,KAAK,cAAAuB,qBAAA,uBAArBA,qBAAA,CAAuBN,IAAI,KAAI,qBAAqB;IAC9E,CAAC,CAAC;IAENN,OAAO,CACFC,OAAO,CAACtB,MAAM,CAACuB,OAAO,EAAE,CAACP,KAAK,EAAES,MAAM,KAAK;MACxCxB,YAAY,CAACiC,WAAW,CAAC,CAAC;MAC1BjC,YAAY,CAACkC,iBAAiB,CAAC,CAAC;MAChCnB,KAAK,CAACb,SAAS,GAAG,IAAI;MACtBa,KAAK,CAACoB,eAAe,GAAG,KAAK;IAEjC,CAAC,CAAC,CACDd,OAAO,CAACtB,MAAM,CAACwB,SAAS,EAAE,CAACR,KAAK,EAAES,MAAM,KAAK;MAC1CT,KAAK,CAACb,SAAS,GAAG,KAAK;IAC3B,CAAC,CAAC,CACDmB,OAAO,CAACtB,MAAM,CAAC8B,QAAQ,EAAE,CAACd,KAAK,EAAES,MAAM,KAAK;MACzCT,KAAK,CAACb,SAAS,GAAG,KAAK;IAC3B,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEY,kBAAkB;EAAEE,cAAc;EAAEC;AAAU,CAAC,GAAGP,SAAS,CAAC0B,OAAO;AAClF,OAAO,MAAMC,WAAW,GAAG3B,SAAS,CAAC0B,OAAO;AAC5C,eAAe1B,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}